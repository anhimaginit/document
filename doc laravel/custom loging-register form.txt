php artisan make:auth : tao layout

	php artisan make:auth  create homeController, wiew/auth/login.bade.php, ..update route
1/login
	a/route:
		Route::group(['middleware' =>[ 'web']], function () {
			Route::get('/login', ['as' => 'login', 'uses' => 'LoginCusController@getLogin']);
			Route::post('/login', ['as' => 'login', 'uses' => 'LoginCusController@postLogin']);
			});
	b/controller:
		namespace App\Http\Controllers;

		use App\Http\Controllers\Controller;
		use Illuminate\Foundation\Auth\AuthenticatesUsers;
		use Illuminate\Http\Request;
		use App\User;
		use Auth;
		//use Validator;
		use Illuminate\Support\Facades\Session;
		use App\Http\Requests;
		use Illuminate\Session\Middleware\StartSession;
		use Illuminate\Support\Facades\Validator;
		use Illuminate\Support\MessageBag;
		use Illuminate\Support\Facades\Redirect;
		
		class LoginCusController extends Controller
		{
			use AuthenticatesUsers;
			
			public function __construct()
			{
				$this->middleware('guest', ['except' => 'logout']);
			}

			public function getLogin() {
				return view('auth.login');
			}
			public function postLogin(Request $request) {
				$email = $request->input('email');
				$password = $request->input('password');

				if( Auth::attempt(['email' => $email, 'password' =>$password])) {
					$user = Auth::user();
					Session::push('userlogin', $user);
					return redirect()->intended('home');
				} else {
					$errors = new MessageBag(['errorlogin' => 'Email hoặc mật khẩu không đúng']);
					return redirect()->back()->withInput()->withErrors($errors);
				}

			}

			
		}
		
2/logout:
	a/route: redirect (/)
	Route::get('logout', function (){
        Auth::logout();
        return redirect('/');
    });

3/ layout: for logout
	<a href="{{ url('/logout') }}"> Logout </a>
 
4/  Register:  note "required", if remove "required", it will fill in error trong <span>
	 @if ($errors->has('address'))
		<span class="help-block">
			<strong>{{ $errors->first('address') }}</strong>
		</span>
	@endif
	
	-Add new field
	
	a/Route: 
	Route::get('/register', ['as' => 'register', 'uses' => 'RegisterCusController@register']);
	Route::post('/register', ['as' => 'register', 'uses' => 'RegisterCusController@addnewuser']);
	b/controller:
	
	 public function register() {
        return view('auth.register');
    }
    public function addnewuser(Request $request) {
        $postData = $request->all();
        // setting up custom error messages for the field validation
        $messages = [
            'name.required' => 'Enter Your Name',
            'email.required' => 'Enter email address',
            'password.required' => 'You need a password',
            'address.required' => 'Enter address',
        ];
        $rules = [
            'name' => 'required',
            'email' => 'required|email|unique:users',
            'password' => 'required',
            'address' => 'required',
        ];


        // doing the validation, passing post data, rules and the messages
       $validator = Validator::make($postData, $rules, $messages);
        if ($validator->fails()) {
            // send back to the page with the input data and errors
            return Redirect::to('register')->withInput()->withErrors($validator);
        }else{
            User::create([
                'name' => $request->input('name'),
                'email' => $request->input('email'),
                'password' => bcrypt($request->input('password')),
                'address' => $request->input('address'),
            ]);
            return redirect('/');
        }

    }

	

			
	
